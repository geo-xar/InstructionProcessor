# Copyright 2022 by Georgios Charitos.
# All rights reserved.

cmake_minimum_required(VERSION 3.22)

project(InstructionProcessor)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# If compiler is either GCC or CLANG then
# - enable all warnings (-Wall),
# - treat all warnings as errors (-Werror),
# - enable additional warnings (-Wextra).
# Else if in Windows i.e. MSVC compiler then
# - enable all warnings (/Wall).
if (CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "-Wall -Werror -Wextra")
# /Wall flag generates a lot of clutter on Windows
# Activate it only for debugging purposes
#elseif (WIN32)
#  set(CMAKE_CXX_FLAGS "/Wall")
endif()

# Set optimisation related flag
# for both Windows and Linux OS,
# for both Debug and Release configurations.
if (NOT WIN32)
  if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  else()# Release configuration
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
  endif()
else()# WIN32
  if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Od")
  else()# Release configuration
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
  endif()
endif()

# Enable standard C++ stack unwinding on Windows.
# Catches both structured (asynchronous) and standard C++ (synchronous) exceptions when you use catch(...) syntax.
# /EHa overrides both /EHs and /EHc arguments.
if (WIN32)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHa")
endif()

# Ignore certain warnings generated by Clang compiler in Windows.
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  # We don't worry about backward-compat with C++98.
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat -Wno-c++98-compat-pedantic")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-exit-time-destructors -Wno-global-constructors -Wno-shadow-uncaptured-local")
endif()

# Code coverage compiler and linker related flags on Linux.
if (CODE_COVERAGE AND NOT WIN32)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
  set(GCC_COVERAGE_LINK_FLAGS "-lgcov")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
endif()

# Print all build configuration, compiler ID, flags and linker flags.
message("CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message("CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
message("CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message("CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")

add_subdirectory(src)
add_subdirectory(tst)
